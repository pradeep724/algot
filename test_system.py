#!/usr/bin/env python3
"""
Comprehensive test suite for all strategies and core modules
"""
import sys
import traceback
from datetime import datetime, timedelta
import pandas as pd
import numpy as np
import yaml
import os

sys.path.append('.')

STRATEGIES = [
    ('volatility_breakout', 'VolatilityBreakoutStrategy'),
    ('rsi_mean_reversion', 'RSIMeanReversionStrategy'),
    ('statistical_arbitrage', 'StatisticalArbitrageStrategy'),
    ('bollinger_squeeze', 'BollingerSqueezeStrategy'),
    ('moving_average_crossover', 'MovingAverageCrossoverStrategy'),
    ('price_action_breakout', 'PriceActionBreakoutStrategy'),
    ('bollinger_band_reversal', 'BollingerBandReversalStrategy'),
    ('support_resistance_bounce', 'SupportResistanceBounceStrategy'),
    ('implied_volatility_premium', 'ImpliedVolatilityPremiumStrategy'),
    ('options_flow_momentum', 'OptionsFlowMomentumStrategy')
]

def create_sample_data():
    """Create realistic sample data for testing"""
    dates = pd.date_range(start=datetime.now() - timedelta(days=365), periods=365, freq='D')
    
    # Generate realistic price series
    base_price = 100
    returns = np.random.normal(0.0005, 0.02, len(dates))  # Daily returns
    prices = base_price * np.exp(np.cumsum(returns))
    
    # Add some volatility and gaps
    for i in range(1, len(prices)):
        if np.random.random() < 0.05:  # 5% chance of gap
            gap = np.random.normal(0, 0.01)
            prices[i:] *= (1 + gap)
    
    # Generate OHLC data
    opens = prices * (1 + np.random.normal(0, 0.002, len(prices)))
    highs = np.maximum(opens, prices) * (1 + np.abs(np.random.normal(0, 0.005, len(prices))))
    lows = np.minimum(opens, prices) * (1 - np.abs(np.random.normal(0, 0.005, len(prices))))
    volumes = np.random.randint(50000, 500000, len(prices))
    
    data = pd.DataFrame({
        'Open': opens,
        'High': highs,
        'Low': lows,
        'Close': prices,
        'Volume': volumes
    }, index=dates)
    
    data.attrs['symbol'] = 'TEST'
    return data

def test_strategy_import(name, class_name):
    """Test strategy import and initialization"""
    try:
        # Add strategies folder to path
        if 'strategies' not in sys.path:
            sys.path.insert(0, 'strategies')
        
        module = __import__(name, fromlist=[class_name])
        klass = getattr(module, class_name)
        
        # Load config for proper initialization
        config = load_test_config()
        inst = klass(config)
        
        print(f"‚úÖ Strategy {name} imported successfully.")
        return inst
    except Exception as e:
        print(f"‚ùå Import failed for {name}: {str(e)}")
        traceback.print_exc()
        return None

def load_test_config():
    """Load configuration for testing"""
    try:
        with open('enhanced_config.yaml', 'r') as file:
            return yaml.safe_load(file)
    except FileNotFoundError:
        # Return minimal config if file not found
        return {
            'strategies': {strategy[0]: {'enabled': True} for strategy in STRATEGIES},
            'risk_management': {'account_capital': 500000}
        }

def test_signal_generation(strategy, df):
    """Test signal generation for a strategy"""
    try:
        # Test with different market regimes
        regimes = [
            {'regime': 'normal', 'volatility_percentile': 50},
            {'regime': 'high_volatility', 'volatility_percentile': 85},
            {'regime': 'low_volatility', 'volatility_percentile': 15}
        ]
        
        signals_generated = 0
        
        for regime in regimes:
            signal = strategy.generate_signal(df, regime)
            if signal is not None:
                signals_generated += 1
                print(f"üéØ Signal generated by {strategy.name} in {regime['regime']}: {signal.signal_type} at ‚Çπ{signal.entry_price:.2f}")
                
                # Validate signal structure
                required_attrs = ['timestamp', 'symbol', 'strategy', 'signal_type', 'entry_price', 'target_price', 'stop_loss']
                for attr in required_attrs:
                    if not hasattr(signal, attr):
                        print(f"‚ö†Ô∏è Missing attribute {attr} in signal from {strategy.name}")
        
        if signals_generated == 0:
            print(f"‚ö†Ô∏è No signals generated by {strategy.name} (may depend on market conditions)")
        else:
            print(f"‚úÖ {strategy.name} generated {signals_generated} signals across different regimes")
            
    except Exception as e:
        print(f"‚ùå Signal generation failed for {strategy.name}: {str(e)}")
        traceback.print_exc()

def test_sample_data_generator():
    """Test the sample data generator"""
    try:
        from sample_data import EnhancedSampleDataGenerator
        
        generator = EnhancedSampleDataGenerator()
        
        # Test single index generation
        df = generator.generate_sample_data('NIFTY', 100)
        
        if len(df) > 0 and all(col in df.columns for col in ['Open', 'High', 'Low', 'Close', 'Volume']):
            print("‚úÖ Sample data generator working correctly")
            print(f"   Generated {len(df)} days of data for NIFTY")
            
            # Test multiple indices
            multi_data = generator.generate_multiple_indices(['NIFTY', 'BANKNIFTY'], 50)
            print(f"   Generated data for {len(multi_data)} indices")
        else:
            print("‚ùå Sample data generator failed validation")
            
    except Exception as e:
        print(f"‚ùå Sample data generator test failed: {str(e)}")
        traceback.print_exc()

def test_enhanced_backtester():
    """Test the enhanced backtesting system"""
    try:
        from enhanced_backtesting import EnhancedBacktester
        from sample_data import EnhancedSampleDataGenerator
        
        config = load_test_config()
        backtester = EnhancedBacktester(config)
        
        # Generate test data
        generator = EnhancedSampleDataGenerator()
        data = generator.generate_multiple_indices(['NIFTY'], 100)
        
        # Run mini backtest
        results = backtester.run_enhanced_backtest(data)
        
        if results and 'total_trades' in results:
            print("‚úÖ Enhanced backtester working correctly")
            print(f"   Processed backtest with {results['total_trades']} trades")
        
    except Exception as e:
        print(f"‚ùå Enhanced backtester test failed: {str(e)}")

def test_risk_management():
    """Test the risk management system"""
    try:
        from enhanced_risk_management import EnhancedRiskManager
        
        config = load_test_config()
        risk_manager = EnhancedRiskManager(config)
        
        # Test Kelly calculation
        kelly_fraction = risk_manager.calculate_kelly_position_size(0.6, 0.025, 0.015)
        
        if 0 <= kelly_fraction <= 1:
            print("‚úÖ Risk management system working correctly")
            print(f"   Kelly fraction calculated: {kelly_fraction:.3f}")
        
    except Exception as e:
        print(f"‚ùå Risk management test failed: {str(e)}")

def main():
    """Main test runner"""
    print("üß™ Running Comprehensive System Tests...")
    print("=" * 60)
    
    # Test sample data creation
    print("\nüìä Testing Sample Data Generation:")
    test_sample_data_generator()
    
    # Create test data
    df = create_sample_data()
    print(f"\nüìà Created test dataset with {len(df)} rows")
    
    # Test strategy imports and signal generation
    print(f"\nüéØ Testing {len(STRATEGIES)} Trading Strategies:")
    strategies_tested = 0
    successful_strategies = []
    
    for name, class_name in STRATEGIES:
        print(f"\n--- Testing {name} ---")
        strategy = test_strategy_import(name, class_name)
        
        if strategy:
            test_signal_generation(strategy, df)
            strategies_tested += 1
            successful_strategies.append(name)
    
    # Test core modules
    print(f"\nüîß Testing Core Modules:")
    test_enhanced_backtester()
    test_risk_management()
    
    # Summary
    print("\n" + "=" * 60)
    print("üìã TEST SUMMARY:")
    print(f"‚úÖ Successfully tested {strategies_tested}/{len(STRATEGIES)} strategies")
    print(f"üìà Working strategies: {', '.join(successful_strategies)}")
    
    if strategies_tested == len(STRATEGIES):
        print("üéâ ALL TESTS PASSED! System is ready for use.")
    else:
        failed = len(STRATEGIES) - strategies_tested
        print(f"‚ö†Ô∏è {failed} strategies failed. Check error messages above.")
    
    print("\nüöÄ To start using the system:")
    print("   1. Run: python -c 'from sample_data import *; gen = EnhancedSampleDataGenerator(); data = gen.generate_sample_data(\"NIFTY\", 365)'")
    print("   2. Check enhanced_config.yaml for strategy parameters")
    print("   3. Use enhanced_backtesting.py for backtesting")
    print("   4. Review SETUP_GUIDE.md for detailed instructions")

if __name__ == '__main__':
    main()
