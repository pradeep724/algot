from backtesting import TradingSignal
import numpy as np

class RSIMeanReversionStrategy:
    def __init__(self, config):
        self.name = "rsi_mean_reversion"
        self.config = config.get('rsi_mean_reversion', {})
        self.rsi_period = self.config.get('rsi_period', 14)
        self.oversold_threshold = self.config.get('oversold_threshold', 25)
        self.overbought_threshold = self.config.get('overbought_threshold', 75)
        self.sma_period = self.config.get('sma_period', 20)
        self.stop_loss_pct = self.config.get('stop_loss_pct', 0.025)
        self.profit_target_pct = self.config.get('profit_target_pct', 0.035)
        self.max_holding_days = self.config.get('max_holding_days', 7)

    def calculate_rsi(self, prices, period=14):
        delta = prices.diff()
        gain = delta.where(delta > 0, 0)
        loss = -delta.where(delta < 0, 0)
        avg_gain = gain.rolling(window=period).mean()
        avg_loss = loss.rolling(window=period).mean()
        rs = avg_gain / avg_loss
        rsi = 100 - (100 / (1 + rs))
        return rsi

    def calculate_indicators(self, df):
        df = df.copy()
        df['RSI'] = self.calculate_rsi(df['Close'], self.rsi_period)
        df['SMA'] = df['Close'].rolling(window=self.sma_period).mean()
        df['ATR'] = abs(df['High']-df['Low']).rolling(window=14).mean()
        df['Volume_SMA'] = df['Volume'].rolling(window=20).mean()
        return df

    def generate_signal(self, df, regime_info):
        if len(df) < max(self.rsi_period, self.sma_period) + 10:
            return None
        df_with_indicators = self.calculate_indicators(df)
        current = df_with_indicators.iloc[-1]
        prev_rsi = df_with_indicators.iloc[-2]['RSI']
        oversold = current['RSI'] < self.oversold_threshold and prev_rsi >= self.oversold_threshold and current['Close'] > current['SMA']
        overbought = current['RSI'] > self.overbought_threshold and prev_rsi <= self.overbought_threshold and current['Close'] < current['SMA']
        volume_confirmation = current['Volume'] > current['Volume_SMA']

        if oversold and volume_confirmation:
            entry = current['Close']
            target = entry * (1 + self.profit_target_pct)
            stop = entry - (current['ATR'] * 1.5)
            risk = entry - stop
            reward = target - entry
            rr = reward / risk if risk > 0 else 0
            confidence = 0.8 if df_with_indicators['RSI'].tail(5).mean() < 35 else 0.6
            if rr >= 1.0:
                return TradingSignal(
                    timestamp=current.name,
                    symbol=df.attrs.get('symbol', 'UNKNOWN'),
                    strategy=self.name,
                    signal_type='BUY',
                    strength=0.8,
                    entry_price=entry,
                    target_price=target,
                    stop_loss=stop,
                    position_size=1,
                    expected_pnl=self.profit_target_pct,
                    risk_reward_ratio=rr,
                    confidence=confidence,
                    market_regime=regime_info.get('regime', 'normal'),
                    reasons=f"RSI oversold mean reversion, RSI:{current['RSI']:.1f}, RR:{rr:.2f}"
                )
        elif overbought and volume_confirmation:
            entry = current['Close']
            target = entry * (1 - self.profit_target_pct)
            stop = entry + (current['ATR'] * 1.5)
            risk = stop - entry
            reward = entry - target
            rr = reward / risk if risk > 0 else 0
            confidence = 0.8 if df_with_indicators['RSI'].tail(5).mean() > 65 else 0.6
            if rr >= 1.0:
                return TradingSignal(
                    timestamp=current.name,
                    symbol=df.attrs.get('symbol', 'UNKNOWN'),
                    strategy=self.name,
                    signal_type='SELL',
                    strength=0.8,
                    entry_price=entry,
                    target_price=target,
                    stop_loss=stop,
                    position_size=1,
                    expected_pnl=self.profit_target_pct,
                    risk_reward_ratio=rr,
                    confidence=confidence,
                    market_regime=regime_info.get('regime', 'normal'),
                    reasons=f"RSI overbought mean reversion, RSI:{current['RSI']:.1f}, RR:{rr:.2f}"
                )
        return None
