from abc import ABC, abstractmethod
import pandas as pd
import numpy as np
from utils.logger import log

class BaseStrategy(ABC):
    def __init__(self, config):
        self.config = config
        self.name = self.__class__.__name__

    @abstractmethod
    def generate_signal(self, historical_data, live_data):
        """Generate trading signal based on strategy logic."""
        pass

    @abstractmethod
    def calculate_position_size(self, signal, account_value):
        """Calculate appropriate position size."""
        pass

    def _calculate_technical_indicators(self, df):
        """Calculate common technical indicators."""
        # RSI
        df['rsi'] = self._calculate_rsi(df['Close'], self.config['indicators']['rsi_period'])
        
        # Moving averages
        df['sma_20'] = df['Close'].rolling(20).mean()
        df['sma_50'] = df['Close'].rolling(50).mean()
        
        # Bollinger Bands
        df['bb_upper'], df['bb_lower'] = self._calculate_bollinger_bands(df['Close'])
        
        # Volume
        df['volume_avg'] = df['Volume'].rolling(self.config['indicators']['volume_avg_period']).mean()
        
        # ATR
        df['atr'] = self._calculate_atr(df)
        
        return df

    def _calculate_rsi(self, prices, period=14):
        """Calculate RSI."""
        delta = prices.diff()
        gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()
        loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()
        rs = gain / loss
        return 100 - (100 / (1 + rs))

    def _calculate_bollinger_bands(self, prices, period=20, std_dev=2):
        """Calculate Bollinger Bands."""
        sma = prices.rolling(period).mean()
        std = prices.rolling(period).std()
        upper = sma + (std * std_dev)
        lower = sma - (std * std_dev)
        return upper, lower

    def _calculate_atr(self, df, period=14):
        """Calculate Average True Range."""
        high_low = df['High'] - df['Low']
        high_close = np.abs(df['High'] - df['Close'].shift())
        low_close = np.abs(df['Low'] - df['Close'].shift())
        
        ranges = pd.concat([high_low, high_close, low_close], axis=1)
        true_range = ranges.max(axis=1)
        return true_range.rolling(period).mean()

    def _is_market_hours(self):
        """Check if market is open."""
        now = pd.Timestamp.now(tz='Asia/Kolkata')
        market_open = now.replace(hour=9, minute=15, second=0, microsecond=0)
        market_close = now.replace(hour=15, minute=30, second=0, microsecond=0)
        
        # Check if it's a weekday and within market hours
        is_weekday = now.weekday() < 5
        is_market_time = market_open <= now <= market_close
        
        return is_weekday and is_market_time
